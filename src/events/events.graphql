type Event {
  id: ID!
  text: String
  type: EventType
  incident: Incident
  eventTime: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

enum EventType {
  CAUSE
  DETECTION
  RESOLUTION
  GENERIC
}

input CreateEventInput {
  text: String!
  incidentId: String
  eventDate: String
  type: EventType
}

input UpdateEventInput {
  id: ID!
  text: String
  type: EventType
  eventDate: String
}

type Query {
  causeEventByIncidentId(incidentId: ID!): Event
  detectionEventByIncidentId(incidentId: ID!): Event
  resolutionEventByIncidentId(incidentId: ID!): Event
}

type Mutation {
  createEvent(createEventInput: CreateEventInput!): Event!
  updateEvent(updateEventInput: UpdateEventInput!): Event!
  removeEvent(id: ID!): Event
}
